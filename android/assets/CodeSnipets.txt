// Adding a button

final TextButton button = new TextButton("Click Me", skin, "default");
		button.setWidth(200);
		button.setHeight(50);

		final Dialog dialog = new Dialog("Click Message", skin);

		button.addListener(new ClickListener(){
			@Override
			public void clicked(InputEvent event, float x, float y)
			{
				dialog.show(stage);
				Timer.schedule(new Timer.Task()
				{
					@Override
					public void run() {
						dialog.hide();
					}
				}, 5);

			}
		});

		stage.addActor(button);

    ///////////////////////////////////////////////////////////////////////////
	//								Groovy									 //
	///////////////////////////////////////////////////////////////////////////

	static void runWithGroovyShell() throws Exception
	{
		new GroovyShell().parse( new File("test.groovy") ).invokeMethod( "hello_world", null ) ;
	}

	static void runWithGroovyClassLoader() throws Exception
	{
		// Declaring a class to conform to a java interface class would get rid of
		// a lot of the reflection here
		Class scriptClass = new GroovyClassLoader().parseClass( new File("test.groovy") ) ;
		Object scriptInstance = scriptClass.newInstance() ;
		scriptClass.getDeclaredMethod( "hello_world", new Class[] {} ).invoke( scriptInstance, new Object[] {} ) ;
	}

	static void runWithGroovyScriptEngine() throws Exception
	{
		// Declaring a class to conform to a java interface class would get rid of
		// a lot of the reflection here
		Class scriptClass = new GroovyScriptEngine( "." ).loadScriptByName("test.groovy") ;
		Object scriptInstance = scriptClass.newInstance() ;
		scriptClass.getDeclaredMethod( "hello_world", new Class[] {} ).invoke( scriptInstance, new Object[] {} ) ;
	}

	void passRotateObjectToGroovy() throws Exception
	{
		// Varaibles that I want to pass to the script
		Binding binding = new Binding();
		binding.setVariable("speed", 45);

		final GroovyShell shell = new GroovyShell(binding);

		File file = new File("rotateObject.groovy");

		Script script = shell.parse(file);

		script.run();
		//script.invokeMethod("test", stage.getRoot().findActor("TestActor"));
	}

	///////////////////////////////////////////////////////////////////////////
    //								Misc									 //
    ///////////////////////////////////////////////////////////////////////////

        	for(int i = 0; i < actors.size -1; i++)
        	{
        		if(actors.get(i).getName().compareTo("GroupTestActors") == 0)
        		{
        			g = (Group) actors.get(i);
        		}
        	}


        	///////////////////////////////////////////////////////////////////////////

        	// Invoke the constructor passing in the reference to the actor.
            // DOES NOT WORK. ONLY A METHOD CALL.
            //script.invokeMethod("Constructor", this);

    ///////////////////////////////////////////////////////////////////////////
    //								INPUT									 //
    ///////////////////////////////////////////////////////////////////////////

            @Override
            	public boolean keyDown(int keycode)
            	{
            		// stage is just a container
            		// stage.getRoot().findActor("ace");
            		Array<Actor> actors = stage.getActors();

            		Group g = stage.getRoot().findActor("GroupTestActors");

            		GroovyActor actor = (GroovyActor) g.findActor("GroovyActor");

            		if (keycode == Input.Keys.RIGHT)
            		{
            			if(Gdx.input.isKeyPressed(Input.Keys.CONTROL_LEFT))
            			{
            				actor.setRotation(actor.getRotation() + 1f);
            			}
            			else
            			{
            				g.setRotation(g.getRotation() + 1f);
            			}
            		}

            		if (keycode == Input.Keys.LEFT)
            		{
            			if(Gdx.input.isKeyPressed(Input.Keys.CONTROL_LEFT))
            			{
            				actor.setRotation(actor.getRotation() - 1f);
            			}
            			else
            			{
            				g.setRotation(g.getRotation() - 1f);
            			}
            		}

            		return true;

            	}

    ////////////////////////////////////////////////////////
    @Override
    	public boolean touchDown(int screenX, int screenY, int pointer, int button)
    	{
    		// Screen Coords Top Left of screen
    		// Stage Coords bottom left of the world

    		// Normally you should store this variable somewhere else and override its value
    		Vector2 coord = stage.screenToStageCoordinates(new Vector2((float) screenX, (float) screenY));

    		// True if you only want to catch touchables
    		// Can be overriden to be different shapes
    		GroovyActor hitActor = (GroovyActor) stage.hit(coord.x, coord.y, false);

    		if (hitActor != null)
    		{
    			Gdx.app.log("Hit", hitActor.getName());

    			// TODO Bring up Dialog that allows you to edit the script file of the hitActor and print any exceptions that occur
    		}

    		return true;
    	}

///////////////////////////////////////////////////////////////////////////
    //								UI  									 //
    ///////////////////////////////////////////////////////////////////////////

Window.WindowStyle codeWindowStyle = new Window.WindowStyle();
        codeWindowStyle.titleFont = skin.getFont("default");
        codeWindowStyle.titleFontColor = Color.BLACK;
        codeWindowStyle.background = skin.newDrawable("white", Color.WHITE);
        codeWindowStyle.stageBackground = skin.newDrawable("white", Color.BLUE);
        skin.add("default", codeWindowStyle);

        // Set up the style for the code area
        TextField.TextFieldStyle codeAreaStyle = new TextField.TextFieldStyle();
        codeAreaStyle.font = skin.getFont("default");
        codeAreaStyle.fontColor = Color.BLACK;
        codeAreaStyle.cursor = skin.getDrawable("cursor");
        codeAreaStyle.background = skin.newDrawable("white", Color.WHITE);
        skin.add("default", codeAreaStyle);

///////////////////////////////////////////////////////////////////////////
    //								Actor Creation  						 //
    ///////////////////////////////////////////////////////////////////////////

// Create Actors
        Texture texture = new Texture(Gdx.files.internal("badlogic.jpg"));
        GroovyActor myGroovyActor = new GroovyActor(texture, shell, "rotateObject.groovy");

        // Set Actor Properties
        myGroovyActor.setName("GroovyActor");
        Vector2 pos = stageGameWorld.screenToStageCoordinates(
                new Vector2(
                        (float) Gdx.graphics.getWidth()/2 - texture.getWidth()/2,
                        (float) Gdx.graphics.getHeight()/2 + texture.getHeight()/2));

        myGroovyActor.setPosition(pos.x, pos.y);

        // Create Groups
        Group testActors = new Group();

        // Set group properties
        testActors.setName("GroupTestActors");

        // Add actors to groups
        // Order they are added is the order they are drawn!
        testActors.addActor(myGroovyActor);

        // Add Actors to stageGameWorld
        stageGameWorld.addActor(testActors);

        currentGroovyActor = myGroovyActor;

///////////////////////////////////////////////////////////////////////////
    //							Gradle Jar Creation  						 //
    ///////////////////////////////////////////////////////////////////////////

gradlew deskop:dist

gradlew android:assembleRelease